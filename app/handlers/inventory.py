from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from ..keyboards.inline import main_menu_keyboard, smoke_item_keyboard, smokes_page_keyboard
from ..services.market import add_to_market, get_market_item, remove_from_market
from ..services.smokes import create_smoke, get_smoke, get_user_sale_smokes, get_user_smokes, update_description
from ..services.users import get_balance, update_balance
from ..states import ChangeDescription, SellSmoke

router = Router()


@router.callback_query(F.data == "smokes")
async def callback_smokes(callback: CallbackQuery) -> None:
    await callback.answer()
    smokes = list(get_user_smokes(callback.from_user.id))
    sale_smokes = list(get_user_sale_smokes(callback.from_user.id))
    if not smokes and not sale_smokes:
        new_id = create_smoke(callback.from_user.id)
        await callback.message.edit_text(f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–≤—É—é —Å–∏–≥–∞—Ä—É! üö¨ #{new_id}")
        smokes = list(get_user_smokes(callback.from_user.id))
        sale_smokes = list(get_user_sale_smokes(callback.from_user.id))
    await callback.message.edit_text(
        "üö¨ –í–∞—à–∏ Smokes (—Å—Ç—Ä. 1):",
        reply_markup=smokes_page_keyboard(smokes, sale_smokes, page=1),
    )


@router.callback_query(F.data.startswith("smokes_page_"))
async def callback_smokes_page(callback: CallbackQuery) -> None:
    await callback.answer()
    page = int(callback.data.split("_")[-1])
    smokes = list(get_user_smokes(callback.from_user.id))
    sale_smokes = list(get_user_sale_smokes(callback.from_user.id))
    await callback.message.edit_text(
        f"üö¨ –í–∞—à–∏ Smokes (—Å—Ç—Ä. {page}):",
        reply_markup=smokes_page_keyboard(smokes, sale_smokes, page=page),
    )


@router.callback_query(F.data.startswith("my_smoke_"))
async def callback_my_smoke(callback: CallbackQuery) -> None:
    await callback.answer()
    smoke_id = int(callback.data.split("_")[-1])
    smoke = get_smoke(smoke_id)
    if not smoke or smoke[1] != callback.from_user.id:
        await callback.message.edit_text("‚ùå –≠—Ç–∞ —Å–∏–≥–∞—Ä–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
        return
    _, _, name, description, is_for_sale = smoke
    if is_for_sale:
        item = get_market_item(smoke_id)
        price = item[1] if item else "?"
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –°–Ω—è—Ç—å —Å –ø—Ä–æ–¥–∞–∂–∏", callback_data=f"unsell_{smoke_id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="smokes")],
            ]
        )
        await callback.message.edit_text(
            f"üö¨ <b>{name}</b>\n\nüìù {description}\n\nüíµ –ù–∞ –ø—Ä–æ–¥–∞–∂–µ: {price}üíµ",
            reply_markup=markup,
            parse_mode='HTML'
        )
    else:
        await callback.message.edit_text(
            f"üö¨ <b>{name}</b>\n\nüìù {description}",
            reply_markup=smoke_item_keyboard(smoke_id),
            parse_mode='HTML'
        )


@router.callback_query(F.data.startswith("sell_"))
async def callback_sell_smoke(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    smoke_id = int(callback.data.split("_")[-1])
    smoke = get_smoke(smoke_id)
    if not smoke or smoke[1] != callback.from_user.id:
        await callback.message.answer("‚ùå –°–∏–≥–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤–∞—à–∞.")
        return
    if smoke[4] == 1:
        await callback.message.answer("‚ùå –°–∏–≥–∞—Ä–∞ —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞.")
        return
    await state.update_data(smoke_id=smoke_id)
    await callback.message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è —Å–∏–≥–∞—Ä—ã (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
    await state.set_state(SellSmoke.waiting_for_price)


@router.message(SellSmoke.waiting_for_price)
async def process_sell_price(message: Message, state: FSMContext) -> None:
    try:
        price = int(message.text)
    except (TypeError, ValueError):
        await message.answer("‚ùå –ù—É–∂–Ω–æ —á–∏—Å–ª–æ.")
        return
    if price <= 0:
        await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return
    data = await state.get_data()
    smoke_id = data.get("smoke_id")
    if smoke_id is None:
        await message.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
        await state.clear()
        return
    success, error_message = add_to_market(smoke_id, price, message.from_user.id)
    await state.clear()
    if not success:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {error_message}")
        return
    await message.answer(
        f"‚úÖ –°–∏–≥–∞—Ä–∞ #{smoke_id} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞ {price}üíµ.",
        reply_markup=main_menu_keyboard(),
    )


@router.callback_query(F.data.startswith("unsell_"))
async def callback_unsell(callback: CallbackQuery) -> None:
    await callback.answer()
    smoke_id = int(callback.data.split("_")[-1])
    item = get_market_item(smoke_id)
    if not item:
        await callback.message.answer("‚ùå –°–∏–≥–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–∞—Ä–∫–µ—Ç–µ.")
        return
    _, _, seller_id, _, _ = item
    if seller_id != callback.from_user.id:
        await callback.message.answer("‚õî –≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Å–∏–≥–∞—Ä–∞.")
        return
    remove_from_market(smoke_id)
    smokes = list(get_user_smokes(callback.from_user.id))
    sale_smokes = list(get_user_sale_smokes(callback.from_user.id))
    await callback.message.edit_text(
        "üö¨ –í–∞—à–∏ Smokes (—Å—Ç—Ä. 1):",
        reply_markup=smokes_page_keyboard(smokes, sale_smokes, page=1),
    )


@router.callback_query(F.data.startswith("change_desc_"))
async def callback_change_description(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    smoke_id = int(callback.data.split("_")[-1])
    smoke = get_smoke(smoke_id)
    if not smoke or smoke[1] != callback.from_user.id:
        await callback.message.answer("‚ùå –≠—Ç–∞ —Å–∏–≥–∞—Ä–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
        return
    balance = get_balance(callback.from_user.id)
    if balance < 100:
        await callback.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è (–Ω—É–∂–Ω–æ 100üíµ).")
        return
    update_balance(callback.from_user.id, -100)
    await state.update_data(smoke_id=smoke_id)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–∏–≥–∞—Ä—ã:")
    await state.set_state(ChangeDescription.waiting_for_text)


@router.message(ChangeDescription.waiting_for_text)
async def process_change_description(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    smoke_id = data.get("smoke_id")
    if smoke_id is None:
        await message.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
        await state.clear()
        return
    text = (message.text or "").strip()
    if len(text) < 3:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.")
        return
    if len(text) > 200:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    update_description(smoke_id, text)
    await state.clear()
    await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–∏–≥–∞—Ä—ã #{smoke_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=main_menu_keyboard())
