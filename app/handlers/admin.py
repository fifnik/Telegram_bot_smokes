from datetime import datetime

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from ..config import settings
from ..services.smokes import get_smoke_with_owner
from ..services.users import (
    get_all_user_ids,
    get_broadcast_logs,
    log_broadcast,
    set_balance_by_username,
)

router = Router()


def _is_owner(user_id: int) -> bool:
    return user_id == settings.owner_id


@router.message(Command("broadcast"))
async def command_broadcast(message: Message) -> None:
    if not _is_owner(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    text = message.text.removeprefix("/broadcast").strip()
    if not text:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç>")
        return
    sent = 0
    for user_id in get_all_user_ids():
        try:
            await message.bot.send_message(user_id, f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n{text}")
            sent += 1
        except Exception:  # pragma: no cover - network errors
            continue
    log_broadcast(text, sent)
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


@router.message(Command("broadcast_logs"))
async def command_broadcast_logs(message: Message) -> None:
    if not _is_owner(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    logs = get_broadcast_logs(10)
    if not logs:
        await message.answer("–õ–æ–≥–∏ –ø—É—Å—Ç—ã.")
        return
    lines = ["üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:\n"]
    for text, sent, timestamp_value in logs:
        date = datetime.fromtimestamp(timestamp_value).strftime("%d.%m.%Y %H:%M")
        preview = (text[:60] + "...") if len(text) > 60 else text
        lines.append(f"üóì {date}\nüë• –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\nüí¨ {preview}\n")
    await message.answer("\n".join(lines))


@router.message(Command("get_score"))
async def command_get_score(message: Message) -> None:
    if not _is_owner(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get_score <username> <—Å—É–º–º–∞>")
        return
    username, balance_str = parts[1], parts[2]
    try:
        new_balance = int(balance_str)
    except ValueError:
        await message.answer("–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    if new_balance < 0:
        await message.answer("–ë–∞–ª–∞–Ω—Å >= 0.")
        return
    if set_balance_by_username(username, new_balance):
        await message.answer(f"–ë–∞–ª–∞–Ω—Å @{username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {new_balance}.")
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.message(Command("smokes"))
async def command_smokes_info(message: Message) -> None:
    if not _is_owner(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    parts = message.text.split()
    if len(parts) < 2 or not parts[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>/smokes [id]</b>", parse_mode="HTML")
        return
    smoke_id = int(parts[1])
    smoke = get_smoke_with_owner(smoke_id)
    if not smoke:
        await message.answer(f"‚ùå –°–∏–≥–∞—Ä–∞ —Å ID {smoke_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    sid, name, description, owner_id, is_for_sale, owner_username, price = smoke
    owner_info = f"@{owner_username}" if owner_username else f"ID: {owner_id}"
    price_text = f"\nüíµ –¶–µ–Ω–∞: {price}" if price is not None else ""
    text = (
        f"üö¨ <b>{name}</b>\n"
        f"üÜî ID: {sid}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {owner_info}{price_text}\n"
    )
    await message.answer(text, parse_mode="HTML")
